import React, { useState, useEffect, useMemo, useCallback } from "react";
import { preloadImages, getPreloadPriorities } from "../utils/galleryImages";

const IntroScreen = ({ onComplete }) => {
  const [currentText, setCurrentText] = useState("");
  const [isComplete, setIsComplete] = useState(false);
  const [preloadProgress, setPreloadProgress] = useState(0);
  const [isPreloading, setIsPreloading] = useState(true);
  const [preloadedIndices, setPreloadedIndices] = useState(new Set());

  const fullText = useMemo(() => "ÎØºÏÑù ‚ô• ÏàòÏßÑ Í≤∞ÌòºÏãùÏóê Ï¥àÎåÄÌï©ÎãàÎã§", []);

  const handleComplete = useCallback(() => {
    setIsComplete(true);
    setTimeout(() => {
      onComplete(preloadedIndices);
    }, 1000);
  }, [onComplete, preloadedIndices]);

  // Ïù¥ÎØ∏ÏßÄ ÌîÑÎ¶¨Î°úÎî© ÏãúÏûë
  useEffect(() => {
    const startPreloading = async () => {
      const priorities = getPreloadPriorities();

      try {
        // ÎÜíÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ Ïù¥ÎØ∏ÏßÄÎì§ Î®ºÏ†Ä Î°úÎìú
        console.log("üñºÔ∏è Starting high priority image preload...");
        await preloadImages(priorities.high, (loaded, total, index) => {
          const progress = Math.round((loaded / total) * 50); // 50%ÍπåÏßÄ
          setPreloadProgress(progress);
          // Î°úÎìúÎêú Ïù¥ÎØ∏ÏßÄ Ïù∏Îç±Ïä§ Ï†ÄÏû•
          setPreloadedIndices((prev) => new Set([...prev, index]));
        });

        // ÎÇÆÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ Ïù¥ÎØ∏ÏßÄÎì§ Î∞±Í∑∏ÎùºÏö¥ÎìúÏóêÏÑú Î°úÎìú
        console.log("üñºÔ∏è Starting low priority image preload...");
        preloadImages(priorities.low, (loaded, total, index) => {
          const progress = 50 + Math.round((loaded / total) * 50); // 50%~100%
          setPreloadProgress(progress);
          // Î°úÎìúÎêú Ïù¥ÎØ∏ÏßÄ Ïù∏Îç±Ïä§ Ï†ÄÏû• (ÎÜíÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ Ïù¥ÎØ∏ÏßÄ Í∞úÏàòÎßåÌÅº Ïò§ÌîÑÏÖã Ï∂îÍ∞Ä)
          const actualIndex = index + priorities.high.length;
          setPreloadedIndices((prev) => new Set([...prev, actualIndex]));
        }).then(() => {
          console.log("üéâ All gallery images preloaded!");
          setIsPreloading(false);
        });
      } catch (error) {
        console.error("Image preloading failed:", error);
        setIsPreloading(false);
      }
    };

    startPreloading();
  }, []);

  // ÌÉÄÏù¥Ìïë Ïï†ÎãàÎ©îÏù¥ÏÖò
  useEffect(() => {
    let index = 0;
    const timer = setInterval(() => {
      if (index < fullText.length) {
        setCurrentText((prev) => fullText.substring(0, index + 1));
        index++;
      } else {
        clearInterval(timer);
        // ÎÜíÏùÄ Ïö∞ÏÑ†ÏàúÏúÑ Ïù¥ÎØ∏ÏßÄ Î°úÎî©Ïù¥ ÏôÑÎ£åÎêòÍ±∞ÎÇò ÏµúÏÜå ÏãúÍ∞ÑÏù¥ ÏßÄÎÇòÎ©¥ ÏôÑÎ£å
        setTimeout(() => {
          if (!isPreloading || preloadProgress >= 50) {
            handleComplete();
          } else {
            // ÌîÑÎ¶¨Î°úÎî©Ïù¥ ÎÅùÎÇ† ÎïåÍπåÏßÄ Ï°∞Í∏à Îçî Í∏∞Îã§Î¶º
            const waitTimer = setInterval(() => {
              if (!isPreloading || preloadProgress >= 50) {
                clearInterval(waitTimer);
                handleComplete();
              }
            }, 200);
          }
        }, 1500); // ÏµúÏÜå 1.5Ï¥àÎäî ÎåÄÍ∏∞
      }
    }, 100);

    return () => clearInterval(timer);
  }, [fullText, handleComplete, isPreloading, preloadProgress]);

  return (
    <div className={`intro-screen ${isComplete ? "fade-out" : ""}`}>
      <div className="intro-content">
        <div className="intro-text">
          {currentText}
          <span className="cursor">|</span>
        </div>

        {/* ÌîÑÎ¶¨Î°úÎî© ÏßÑÌñâÎ•† ÌëúÏãú (ÏÑ†ÌÉùÏ†Å) */}
        {isPreloading && preloadProgress > 0 && (
          <div className="preload-progress">
            <div className="preload-bar">
              <div
                className="preload-fill"
                style={{ width: `${preloadProgress}%` }}
              ></div>
            </div>
            <div className="preload-text">
              Ïù¥ÎØ∏ÏßÄ Ï§ÄÎπÑÏ§ë... {preloadProgress}%
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default React.memo(IntroScreen);
