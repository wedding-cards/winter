import React, { useState, useEffect } from "react";
import useScrollAnimation from "../hooks/useScrollAnimation";

const GuestbookSection = () => {
  const [sectionRef, sectionVisible] = useScrollAnimation({ threshold: 0.2 });

  const [guestMessages, setGuestMessages] = useState([]);
  const [newMessage, setNewMessage] = useState({
    name: "",
    message: "",
  });

  useEffect(() => {
    // Í≥†Ïú†Ìïú ID ÏÉùÏÑ± Ìï®Ïàò
    const generateUniqueId = () => {
      return Date.now() + Math.random().toString(36).substr(2, 9);
    };

    // ID Ï§ëÎ≥µ ÌôïÏù∏ Î∞è ÏàòÏ†ï Ìï®Ïàò
    const ensureUniqueIds = (messages) => {
      const seenIds = new Set();
      return messages.map((msg) => {
        if (seenIds.has(msg.id) || !msg.id) {
          // Ï§ëÎ≥µÎêòÍ±∞ÎÇò ÏóÜÎäî IDÎ•º ÏÉàÎ°úÏö¥ Í≥†Ïú† IDÎ°ú ÍµêÏ≤¥
          msg.id = generateUniqueId();
        }
        seenIds.add(msg.id);
        return msg;
      });
    };

    // Î°úÏª¨ Ïä§ÌÜ†Î¶¨ÏßÄÏóêÏÑú Í∏∞Ï°¥ Î©îÏãúÏßÄ Î°úÎìú
    const saved = localStorage.getItem("wedding-guestbook");
    if (saved) {
      try {
        const parsedMessages = JSON.parse(saved);
        const messagesWithUniqueIds = ensureUniqueIds(parsedMessages);
        setGuestMessages(messagesWithUniqueIds);
        // ÏàòÏ†ïÎêú Îç∞Ïù¥ÌÑ∞Î•º Îã§Ïãú Ï†ÄÏû•
        localStorage.setItem(
          "wedding-guestbook",
          JSON.stringify(messagesWithUniqueIds)
        );
      } catch (error) {
        console.error("Failed to parse guestbook data:", error);
        // ÌååÏã± Ïã§Ìå® Ïãú Í∏∞Î≥∏ Î©îÏãúÏßÄÎ°ú Ï¥àÍ∏∞Ìôî
        initializeDefaultMessages();
      }
    } else {
      initializeDefaultMessages();
    }

    function initializeDefaultMessages() {
      // ÏÉòÌîå Î∞©Î™ÖÎ°ù Î©îÏãúÏßÄ
      const sampleMessages = [
        {
          name: "ÏµúÏõêÏ†ï",
          message: "ÎÑàÎ¨¥ ÏïÑÎ¶ÑÎã§Ïö¥ Ïª§ÌîåÏù¥ÏóêÏöî~ ÌèâÏÉù ÌñâÎ≥µÌïòÏÑ∏Ïöî! üéâ",
          date: "2025-10-14",
          id: generateUniqueId(),
        },
        {
          name: "ÏûÑÍ≤ΩÎØº",
          message:
            "ÎØºÏÑùÏïÑ Í≤∞Ìòº Ï∂ïÌïòÌïúÎã§! ÌñâÎ≥µÌïú Í∞ÄÏ†ï ÎßåÎì§Ïñ¥ ÎÇòÍ∞ÄÍ∏∏ ÏùëÏõêÌï†Í≤å üëè",
          date: "2025-10-17",
          id: generateUniqueId(),
        },
      ];
      setGuestMessages(sampleMessages);
      localStorage.setItem("wedding-guestbook", JSON.stringify(sampleMessages));
    }
  }, []);

  const addGuestMessage = () => {
    if (!newMessage.name || !newMessage.message) {
      alert("Ïù¥Î¶ÑÍ≥º Î©îÏãúÏßÄÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    if (newMessage.message.length > 200) {
      alert("Î©îÏãúÏßÄÎäî 200Ïûê Ïù¥ÎÇ¥Î°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.");
      return;
    }

    const messageToAdd = {
      ...newMessage,
      date: new Date().toLocaleDateString("ko-KR", {
        year: "numeric",
        month: "2-digit",
        day: "2-digit",
      }),
      id: Date.now() + Math.random().toString(36).substr(2, 9),
    };

    const updatedMessages = [messageToAdd, ...guestMessages];
    setGuestMessages(updatedMessages);
    localStorage.setItem("wedding-guestbook", JSON.stringify(updatedMessages));

    // ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
    setNewMessage({ name: "", message: "" });
    alert("Ï∂ïÌïò Î©îÏãúÏßÄÍ∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!");
  };

  const handleInputChange = (field, value) => {
    setNewMessage((prev) => ({
      ...prev,
      [field]: value,
    }));
  };

  return (
    <section className="guestbook-section">
      <div className="container">
        <p className="section-subtitle">GUESTBOOK</p>
        <h2 className="section-title">Î∞©Î™ÖÎ°ù</h2>
        <div
          ref={sectionRef}
          className={`guestbook-form animate-on-scroll ${
            sectionVisible ? "visible" : ""
          }`}
        >
          <textarea
            value={newMessage.message}
            onChange={(e) => handleInputChange("message", e.target.value)}
            placeholder="Ï∂ïÌïòÏùò Î©îÏãúÏßÄÎ•º ÎÇ®Í≤®Ï£ºÏÑ∏Ïöî"
          />
          <input
            type="text"
            value={newMessage.name}
            onChange={(e) => handleInputChange("name", e.target.value)}
            placeholder="Ïù¥Î¶Ñ"
          />
          <button onClick={addGuestMessage}>Î©îÏãúÏßÄ ÎÇ®Í∏∞Í∏∞</button>
        </div>

        <div className="guestbook-messages">
          {guestMessages.map((msg) => (
            <div key={msg.id} className="guest-message fade-in">
              <div className="message-header">
                <span className="message-author">{msg.name}</span>
                <span className="message-date">{msg.date}</span>
              </div>
              <div className="message-content">{msg.message}</div>
            </div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default GuestbookSection;
